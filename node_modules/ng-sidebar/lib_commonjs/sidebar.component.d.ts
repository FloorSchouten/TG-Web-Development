import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { SidebarContainer } from './sidebar-container.component';
export declare class Sidebar implements AfterContentInit, OnInit, OnChanges, OnDestroy {
    private _container;
    private _ref;
    opened: boolean;
    openedChange: EventEmitter<boolean>;
    mode: 'over' | 'push' | 'slide';
    dock: boolean;
    dockedSize: string;
    position: 'start' | 'end' | 'left' | 'right' | 'top' | 'bottom';
    animate: boolean;
    autoCollapseHeight: number;
    autoCollapseWidth: number;
    autoCollapseOnInit: boolean;
    sidebarClass: string;
    ariaLabel: string;
    trapFocus: boolean;
    autoFocus: boolean;
    showBackdrop: boolean;
    closeOnClickBackdrop: boolean;
    closeOnClickOutside: boolean;
    keyClose: boolean;
    keyCode: number;
    onContentInit: EventEmitter<null>;
    onOpenStart: EventEmitter<null>;
    onOpened: EventEmitter<null>;
    onCloseStart: EventEmitter<null>;
    onClosed: EventEmitter<null>;
    onTransitionEnd: EventEmitter<null>;
    onModeChange: EventEmitter<string>;
    onPositionChange: EventEmitter<string>;
    _onRerender: EventEmitter<null>;
    _elSidebar: ElementRef;
    private _focusableElementsString;
    private _focusableElements;
    private _focusedBeforeOpen;
    private _tabIndexAttr;
    private _tabIndexIndicatorAttr;
    private _wasCollapsed;
    private _shouldAnimate;
    private _clickEvent;
    private _onClickOutsideAttached;
    private _onKeyDownAttached;
    private _onResizeAttached;
    private _isBrowser;
    constructor(_container: SidebarContainer, _ref: ChangeDetectorRef, platformId: Object);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    open(): void;
    close(): void;
    triggerRerender(): void;
    _getStyle(): CSSStyleDeclaration;
    _onTransitionEnd(e: TransitionEvent): void;
    private readonly _shouldTrapFocus;
    private _focusFirstItem;
    private _onFocusTrap;
    private _setFocused;
    private _initCloseListeners;
    private _initCloseClickListener;
    private _initCloseKeyDownListener;
    private _destroyCloseListeners;
    private _destroyCloseClickListener;
    private _destroyCloseKeyDownListener;
    private _onClickOutside;
    private _onKeyDown;
    private _initCollapseListeners;
    private _destroyCollapseListeners;
    private _collapse;
    readonly _height: number;
    readonly _width: number;
    readonly _dockedSize: number;
    readonly _isModeOver: boolean;
    readonly _isModePush: boolean;
    readonly _isModeSlide: boolean;
    readonly _isDocked: boolean;
    readonly _isLeftOrTop: boolean;
    readonly _isLeftOrRight: boolean;
    readonly _isInert: boolean;
    private _normalizePosition;
}
